# 定义工作流的名称为 CI（持续集成）
name: CI

# 设定工作流触发的条件，当前配置为在代码推送时触发
on: [push]

# 定义作业（job）的名称为 build
jobs:
  build:
    # 指定在 Ubuntu 最新版本的虚拟环境中运行作业
    runs-on: ubuntu-latest
    
    # 定义作业的步骤
    steps:
    # 第一步，使用 actions/checkout 操作从代码库中检出源代码
    - name: Checkout code
      uses: actions/checkout@v2  # 这是 GitHub 提供的一个官方操作，用于拉取当前代码库的代码

    # 第二步，设置Python环境，指定Python版本为3.8
    - name: Set up Python
      uses: actions/setup-python@v2  # 这是 GitHub 提供的一个官方操作，用于设置Python环境
      with:
        python-version: '3.8'  # 设定所需的 Python 版本

    # 第三步，安装依赖项
    - name: Install dependencies
      run: |
        # 使用 pip 安装 Flask 框架
        pip install Flask  # 安装 Flask 框架，以支持应用的运行

    # 第四步，构建 Docker 镜像
    - name: Build Docker image
      run: |
        # 使用 docker build 命令构建名为 my-devops-app 的 Docker 镜像
        docker build -t my-devops-app .  # 该命令会在当前目录（包含 Dockerfile 的目录）下查找并构建镜像

    # 第五步，在 Docker 中运行测试
    - name: Run tests in Docker
      run: |
        # 启动 Docker 容器并在容器中执行测试，确保应用在Docker环境下正常工作
        docker run my-devops-app python -m unittest discover -s tests  # 在容器中运行unittest，发现并执行 tests 目录下的测试
